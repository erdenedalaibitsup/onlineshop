{"ast":null,"code":"import { validation } from '../../util/validator';\n\nconst handleInputChange = (event, validationTypes, Resizer, setMainImage, model, errorMsgModel, setModel, setErrorMsg, setFormValid) => {\n  const target = event.target;\n  const value = target.value;\n  const name = target.name;\n  const type = target.type;\n\n  if (type == 'file') {\n    if (event.target.files[0]) {\n      Resizer.imageFileResizer(event.target.files[0], 500, 500, 'png', 100, 0, uri => {\n        setMainImage(uri);\n      }, 'base64', 200, 200);\n    }\n  }\n\n  const validate = validation(value, validationTypes[name]);\n  let formValid = false;\n  const tempModel = { ...model,\n    [name]: value\n  };\n\n  if (!validate.show) {\n    let istemvavlid = true;\n    Object.values(model).map((el, index) => {\n      if (el.length === 0 && Object.keys(model)[index] !== [name]) {\n        istemvavlid = false;\n        return;\n      }\n    });\n\n    if (istemvavlid) {\n      formValid = true;\n    }\n  }\n\n  const errorMsg = { ...errorMsgModel,\n    [name]: validate\n  };\n  setModel(tempModel);\n  setErrorMsg(errorMsg);\n  setFormValid(formValid);\n};\n\nexport default handleInputChange;","map":{"version":3,"sources":["/Users/User1/developer/onlineshop/src/pages/admin/handleInputChanger/index.js"],"names":["validation","handleInputChange","event","validationTypes","Resizer","setMainImage","model","errorMsgModel","setModel","setErrorMsg","setFormValid","target","value","name","type","files","imageFileResizer","uri","validate","formValid","tempModel","show","istemvavlid","Object","values","map","el","index","length","keys","errorMsg"],"mappings":"AAAA,SAASA,UAAT,QAA2B,sBAA3B;;AAEA,MAAMC,iBAAiB,GAAG,CAACC,KAAD,EAAQC,eAAR,EAAyBC,OAAzB,EAAkCC,YAAlC,EAAgDC,KAAhD,EAAuDC,aAAvD,EACpBC,QADoB,EACVC,WADU,EACGC,YADH,KAErB;AACD,QAAMC,MAAM,GAAGT,KAAK,CAACS,MAArB;AACA,QAAMC,KAAK,GAAGD,MAAM,CAACC,KAArB;AACA,QAAMC,IAAI,GAAGF,MAAM,CAACE,IAApB;AACA,QAAMC,IAAI,GAAGH,MAAM,CAACG,IAApB;;AAEA,MAAIA,IAAI,IAAI,MAAZ,EAAoB;AAChB,QAAIZ,KAAK,CAACS,MAAN,CAAaI,KAAb,CAAmB,CAAnB,CAAJ,EAA2B;AACvBX,MAAAA,OAAO,CAACY,gBAAR,CACId,KAAK,CAACS,MAAN,CAAaI,KAAb,CAAmB,CAAnB,CADJ,EAEI,GAFJ,EAGI,GAHJ,EAII,KAJJ,EAKI,GALJ,EAMI,CANJ,EAOIE,GAAG,IAAI;AACHZ,QAAAA,YAAY,CAACY,GAAD,CAAZ;AAEH,OAVL,EAWI,QAXJ,EAYI,GAZJ,EAaI,GAbJ;AAgBH;AACJ;;AACD,QAAMC,QAAQ,GAAGlB,UAAU,CACvBY,KADuB,EAEvBT,eAAe,CAACU,IAAD,CAFQ,CAA3B;AAIA,MAAIM,SAAS,GAAG,KAAhB;AACA,QAAMC,SAAS,GAAG,EACd,GAAGd,KADW;AAEd,KAACO,IAAD,GAAQD;AAFM,GAAlB;;AAIA,MAAI,CAACM,QAAQ,CAACG,IAAd,EAAoB;AAChB,QAAIC,WAAW,GAAG,IAAlB;AACAC,IAAAA,MAAM,CAACC,MAAP,CAAclB,KAAd,EAAqBmB,GAArB,CAAyB,CAACC,EAAD,EAAKC,KAAL,KAAe;AACpC,UACID,EAAE,CAACE,MAAH,KAAc,CAAd,IACAL,MAAM,CAACM,IAAP,CAAYvB,KAAZ,EAAmBqB,KAAnB,MAA8B,CAACd,IAAD,CAFlC,EAGE;AACES,QAAAA,WAAW,GAAG,KAAd;AACA;AACH;AACJ,KARD;;AASA,QAAIA,WAAJ,EAAiB;AACbH,MAAAA,SAAS,GAAG,IAAZ;AACH;AACJ;;AACD,QAAMW,QAAQ,GAAG,EACb,GAAGvB,aADU;AAEb,KAACM,IAAD,GAAQK;AAFK,GAAjB;AAMAV,EAAAA,QAAQ,CAACY,SAAD,CAAR;AACAX,EAAAA,WAAW,CAACqB,QAAD,CAAX;AACApB,EAAAA,YAAY,CAACS,SAAD,CAAZ;AACH,CA7DD;;AA+DA,eAAelB,iBAAf","sourcesContent":["import { validation } from '../../util/validator'\n\nconst handleInputChange = (event, validationTypes, Resizer, setMainImage, model, errorMsgModel\n    , setModel, setErrorMsg, setFormValid\n) => {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    const type = target.type;\n\n    if (type == 'file') {\n        if (event.target.files[0]) {\n            Resizer.imageFileResizer(\n                event.target.files[0],\n                500,\n                500,\n                'png',\n                100,\n                0,\n                uri => {\n                    setMainImage(uri);\n\n                },\n                'base64',\n                200,\n                200,\n            );\n\n        }\n    }\n    const validate = validation(\n        value,\n        validationTypes[name],\n    );\n    let formValid = false;\n    const tempModel = {\n        ...model,\n        [name]: value,\n    };\n    if (!validate.show) {\n        let istemvavlid = true;\n        Object.values(model).map((el, index) => {\n            if (\n                el.length === 0 &&\n                Object.keys(model)[index] !== [name]\n            ) {\n                istemvavlid = false;\n                return;\n            }\n        });\n        if (istemvavlid) {\n            formValid = true;\n        }\n    }\n    const errorMsg = {\n        ...errorMsgModel,\n        [name]: validate,\n    }\n\n\n    setModel(tempModel);\n    setErrorMsg(errorMsg);\n    setFormValid(formValid);\n}\n\nexport default handleInputChange;"]},"metadata":{},"sourceType":"module"}