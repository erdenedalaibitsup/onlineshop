{"ast":null,"code":"var _jsxFileName = \"/Users/User1/developer/onlineshop/src/pages/admin/content/ProductTypeContent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport TypeTable from '../dataTable/ProductTypeTable';\nimport ProductTypeAdd from '../components/ProductTypeAdd';\nimport ProductTypeControl from '../components/Control';\nimport { ProductTypeContext } from '../../context/ProductTypeCtx';\nimport { validation, validatorTypes } from '../../util/validator';\nimport handleInputChange from '../handleInputChanger';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProductTypeContent = () => {\n  _s();\n\n  const ctx = React.useContext(ProductTypeContext);\n  const validationTypes = {\n    id: validatorTypes.EQUAL,\n    name: validatorTypes.POSITIVENUMBER,\n    size: validatorTypes.NONE\n  };\n  handleInputChange(event, validationTypes, Resizer, setMainImage, model, errorMsgModel, setModel, setErrorMsg, setFormValid); // const handleInputChange = (event) => {\n  //     const target = event.target;\n  //     const value = target.value;\n  //     const name = target.name;\n  //     const validationTypes = {\n  //         id: validatorTypes.EQUAL,\n  //         name: validatorTypes.POSITIVENUMBER,\n  //         size: validatorTypes.NONE\n  //     };\n  //     const validate = validation(\n  //         value,\n  //         validationTypes[name],\n  //         name == \"id\" && ctx.types\n  //     );\n  //     let formValid = false;\n  //     const type = {\n  //         ...ctx.type,\n  //         [name]: value,\n  //     };\n  //     if (!validate.show) {\n  //         let istemvavlid = true;\n  //         Object.values(type).map((el, index) => {\n  //             if (\n  //                 el.length === 0 &&\n  //                 Object.keys(ctx.type)[index] !== [name]\n  //             ) {\n  //                 if (Object.keys(ctx.type)[index] !== 'size' && [name] !== 'size')\n  //                     istemvavlid = false;\n  //                 return;\n  //             }\n  //         });\n  //         if (istemvavlid) {\n  //             formValid = true;\n  //         }\n  //     }\n  //     const errorMsg = {\n  //         ...ctx.errorMsg,\n  //         [name]: validate,\n  //     }\n  //     ctx.setType(type);\n  //     ctx.setErrorMsg(errorMsg);\n  //     ctx.setFormValid(formValid);\n  // }\n\n  const updateButtonAction = type => {\n    ctx.setType({ ...ctx.typeModel,\n      ...type\n    });\n    ctx.setUpdateAction(true);\n    ctx.setErrorMsg(ctx.errorModel);\n  };\n\n  const cancelButtonAction = () => {\n    ctx.setType(ctx.typeModel);\n    ctx.setFormValid(false);\n    ctx.setUpdateAction(false);\n    ctx.setErrorMsg(ctx.errorModel);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-header\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container-fluid\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-4 shadow-none p-3 mb-5 bg-white rounded\",\n            children: [/*#__PURE__*/_jsxDEV(ProductTypeAdd, {\n              updateAction: ctx.updateAction,\n              errorMsg: ctx.errorMsg,\n              type: ctx.type,\n              handleInputChange: handleInputChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(ProductTypeControl, {\n              updateAction: ctx.updateAction,\n              setUpdateAction: ctx.setUpdateAction,\n              cancelButtonAction: cancelButtonAction,\n              formValid: ctx.formValid,\n              add: ctx.addProduct,\n              children: \" \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 25\n          }, this), ctx.table.loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"loading \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 46\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-8\",\n            children: /*#__PURE__*/_jsxDEV(TypeTable, {\n              setType: ctx.setType,\n              updateButtonAction: updateButtonAction,\n              types: ctx.types\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 52\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ProductTypeContent, \"/dMy7t63NXD4eYACoT93CePwGrg=\");\n\n_c = ProductTypeContent;\nexport default ProductTypeContent;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductTypeContent\");","map":{"version":3,"sources":["/Users/User1/developer/onlineshop/src/pages/admin/content/ProductTypeContent.js"],"names":["React","useState","TypeTable","ProductTypeAdd","ProductTypeControl","ProductTypeContext","validation","validatorTypes","handleInputChange","ProductTypeContent","ctx","useContext","validationTypes","id","EQUAL","name","POSITIVENUMBER","size","NONE","event","Resizer","setMainImage","model","errorMsgModel","setModel","setErrorMsg","setFormValid","updateButtonAction","type","setType","typeModel","setUpdateAction","errorModel","cancelButtonAction","updateAction","errorMsg","formValid","addProduct","table","loading","types"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport TypeTable from '../dataTable/ProductTypeTable'\nimport ProductTypeAdd from '../components/ProductTypeAdd'\nimport ProductTypeControl from '../components/Control'\nimport { ProductTypeContext } from '../../context/ProductTypeCtx'\nimport { validation, validatorTypes } from '../../util/validator'\nimport handleInputChange from '../handleInputChanger'\nconst ProductTypeContent = () => {\n    const ctx = React.useContext(ProductTypeContext);\n    const validationTypes = {\n        id: validatorTypes.EQUAL,\n        name: validatorTypes.POSITIVENUMBER,\n        size: validatorTypes.NONE\n    };\n    handleInputChange(event, validationTypes, Resizer, setMainImage, model, errorMsgModel\n        , setModel, setErrorMsg, setFormValid);\n    // const handleInputChange = (event) => {\n    //     const target = event.target;\n    //     const value = target.value;\n    //     const name = target.name;\n    //     const validationTypes = {\n    //         id: validatorTypes.EQUAL,\n    //         name: validatorTypes.POSITIVENUMBER,\n    //         size: validatorTypes.NONE\n    //     };\n    //     const validate = validation(\n    //         value,\n    //         validationTypes[name],\n    //         name == \"id\" && ctx.types\n    //     );\n    //     let formValid = false;\n    //     const type = {\n    //         ...ctx.type,\n    //         [name]: value,\n    //     };\n    //     if (!validate.show) {\n    //         let istemvavlid = true;\n    //         Object.values(type).map((el, index) => {\n    //             if (\n    //                 el.length === 0 &&\n    //                 Object.keys(ctx.type)[index] !== [name]\n    //             ) {\n\n    //                 if (Object.keys(ctx.type)[index] !== 'size' && [name] !== 'size')\n    //                     istemvavlid = false;\n    //                 return;\n    //             }\n    //         });\n    //         if (istemvavlid) {\n    //             formValid = true;\n    //         }\n    //     }\n    //     const errorMsg = {\n    //         ...ctx.errorMsg,\n    //         [name]: validate,\n    //     }\n\n\n    //     ctx.setType(type);\n    //     ctx.setErrorMsg(errorMsg);\n    //     ctx.setFormValid(formValid);\n    // }\n    const updateButtonAction = (type) => {\n        ctx.setType({ ...ctx.typeModel, ...type });\n        ctx.setUpdateAction(true);\n        ctx.setErrorMsg(ctx.errorModel);\n\n    }\n\n    const cancelButtonAction = () => {\n        ctx.setType(ctx.typeModel);\n        ctx.setFormValid(false);\n        ctx.setUpdateAction(false);\n        ctx.setErrorMsg(ctx.errorModel);\n    }\n    return (\n\n        <div className=\"content-wrapper\">\n            <div className=\"content-header\">\n                <div className=\"container-fluid\">\n                    <div className=\"row\">\n                        <div className=\"col-4 shadow-none p-3 mb-5 bg-white rounded\" >\n                            <ProductTypeAdd updateAction={ctx.updateAction} errorMsg={ctx.errorMsg} type={ctx.type} handleInputChange={handleInputChange}></ProductTypeAdd>\n                            <ProductTypeControl updateAction={ctx.updateAction} setUpdateAction={ctx.setUpdateAction}\n                                cancelButtonAction={cancelButtonAction}\n                                formValid={ctx.formValid} add={ctx.addProduct}> </ProductTypeControl>\n                        </div>\n                        {ctx.table.loading ? <p>loading </p> :\n                            <div className=\"col-8\"><TypeTable setType={ctx.setType} updateButtonAction={updateButtonAction} types={ctx.types}></TypeTable></div>\n                        }\n                    </div>\n                </div>\n            </div>\n        </div >\n    )\n}\n\nexport default ProductTypeContent;"]},"metadata":{},"sourceType":"module"}