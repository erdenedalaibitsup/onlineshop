{"ast":null,"code":"var _jsxFileName = \"/Users/User1/developer/onlineshop/src/pages/admin/content/ProductSubTypeContent.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport TypeTable from '../dataTable/ProductSubTypeTable';\nimport ProductSubTypeAdd from '../components/ProductSubTypeAdd';\nimport ProductSubTypeControl from '../components/Control';\nimport { ProductSubTypeContext } from '../../context/ProductSubTypeCtx';\nimport { validation, validatorTypes } from '../../util/validator';\nimport handleInputChanger from '../handleInputChanger';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProductSubTypeContent = () => {\n  _s();\n\n  const ctx = React.useContext(ProductSubTypeContext);\n  console.log(\"ctx\", ctx);\n\n  const handleInputChange = event => {\n    const name = event.target.name;\n    const value = event.target.value;\n    const validationTypes = {\n      id: validatorTypes.EQUAL,\n      name: validatorTypes.POSITIVENUMBER,\n      size: validatorTypes.NONE\n    };\n    const validate = validation(value, validationTypes[name], name == \"id\" && ctx.subTypes);\n    handleInputChanger(event, validationTypes, validate, null, null, ctx.subType, ctx.errorMsg, type => ctx.setSubType(type), errorMsg => ctx.setErrorMsg(errorMsg), formValid => ctx.setFormValid(formValid)); // const target = event.target;\n    // const value = target.value;\n    // const name = target.name;\n    // const validationTypes = {\n    //     id: validatorTypes.EQUAL,\n    //     name: validatorTypes.POSITIVENUMBER\n    // };\n    // let formValid = false;\n    // const subType = {\n    //     ...ctx.subType,\n    //     [name]: value,\n    // };\n    // if (!validate.show) {\n    //     let istemvavlid = true;\n    //     Object.values(subType).map((el, index) => {\n    //         if (\n    //             el.length === 0 &&\n    //             Object.keys(ctx.subType)[index] !== [name]\n    //         ) {\n    //             istemvavlid = false;\n    //             return;\n    //         }\n    //     });\n    //     if (istemvavlid) {\n    //         formValid = true;\n    //     }\n    // }\n    // const errorMsg = {\n    //     ...ctx.errorMsg,\n    //     [name]: validate,\n    // }\n    // ctx.setSubType(subType);\n    // ctx.setErrorMsg(errorMsg);\n    // ctx.setFormValid(formValid);\n  };\n\n  const updateButtonAction = subType => {\n    ctx.setSubType({ ...ctx.subTypeModel,\n      ...subType\n    });\n    ctx.setUpdateAction(true);\n    ctx.setErrorMsg(ctx.errorModel);\n  };\n\n  const cancelButtonAction = () => {\n    ctx.setSubType(ctx.subTypeModel);\n    ctx.setFormValid(false);\n    ctx.setUpdateAction(false);\n    ctx.setErrorMsg(ctx.errorModel);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-header\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container-fluid\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-4 shadow-none p-3 mb-5 bg-white rounded\",\n            children: [/*#__PURE__*/_jsxDEV(ProductSubTypeAdd, {\n              updateAction: ctx.updateAction,\n              errorMsg: ctx.errorMsg,\n              subType: ctx.subType,\n              handleInputChange: handleInputChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(ProductSubTypeControl, {\n              updateAction: ctx.updateAction,\n              setUpdateAction: ctx.setUpdateAction,\n              cancelButtonAction: cancelButtonAction,\n              formValid: ctx.formValid,\n              add: ctx.addProductSubType,\n              children: \" \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 25\n          }, this), ctx.table.loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"loading \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 46\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-8\",\n            children: /*#__PURE__*/_jsxDEV(TypeTable, {\n              setSubType: ctx.setSubType,\n              updateButtonAction: updateButtonAction,\n              subTypes: ctx.subTypes\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 52\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ProductSubTypeContent, \"/dMy7t63NXD4eYACoT93CePwGrg=\");\n\n_c = ProductSubTypeContent;\nexport default ProductSubTypeContent;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductSubTypeContent\");","map":{"version":3,"sources":["/Users/User1/developer/onlineshop/src/pages/admin/content/ProductSubTypeContent.js"],"names":["React","TypeTable","ProductSubTypeAdd","ProductSubTypeControl","ProductSubTypeContext","validation","validatorTypes","handleInputChanger","ProductSubTypeContent","ctx","useContext","console","log","handleInputChange","event","name","target","value","validationTypes","id","EQUAL","POSITIVENUMBER","size","NONE","validate","subTypes","subType","errorMsg","type","setSubType","setErrorMsg","formValid","setFormValid","updateButtonAction","subTypeModel","setUpdateAction","errorModel","cancelButtonAction","updateAction","addProductSubType","table","loading"],"mappings":"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","sourcesContent":["import React from 'react'\nimport TypeTable from '../dataTable/ProductSubTypeTable'\nimport ProductSubTypeAdd from '../components/ProductSubTypeAdd'\nimport ProductSubTypeControl from '../components/Control'\nimport { ProductSubTypeContext } from '../../context/ProductSubTypeCtx'\nimport { validation, validatorTypes } from '../../util/validator'\nimport handleInputChanger from '../handleInputChanger'\nconst ProductSubTypeContent = () => {\n    const ctx = React.useContext(ProductSubTypeContext);\n    console.log(\"ctx\", ctx);\n    const handleInputChange = (event) => {\n        const name = event.target.name;\n        const value = event.target.value;\n        const validationTypes = {\n            id: validatorTypes.EQUAL,\n            name: validatorTypes.POSITIVENUMBER,\n            size: validatorTypes.NONE\n        };\n        const validate = validation(\n            value,\n            validationTypes[name],\n            name == \"id\" && ctx.subTypes\n        );\n\n        handleInputChanger(event, validationTypes, validate, null, null, ctx.subType, ctx.errorMsg\n            , (type) => ctx.setSubType(type), (errorMsg) => ctx.setErrorMsg(errorMsg), (formValid) => ctx.setFormValid(formValid));\n        // const target = event.target;\n        // const value = target.value;\n        // const name = target.name;\n        // const validationTypes = {\n        //     id: validatorTypes.EQUAL,\n        //     name: validatorTypes.POSITIVENUMBER\n        // };\n\n        // let formValid = false;\n        // const subType = {\n        //     ...ctx.subType,\n        //     [name]: value,\n        // };\n        // if (!validate.show) {\n        //     let istemvavlid = true;\n        //     Object.values(subType).map((el, index) => {\n        //         if (\n        //             el.length === 0 &&\n        //             Object.keys(ctx.subType)[index] !== [name]\n        //         ) {\n        //             istemvavlid = false;\n        //             return;\n        //         }\n        //     });\n        //     if (istemvavlid) {\n        //         formValid = true;\n        //     }\n        // }\n        // const errorMsg = {\n        //     ...ctx.errorMsg,\n        //     [name]: validate,\n        // }\n\n\n        // ctx.setSubType(subType);\n        // ctx.setErrorMsg(errorMsg);\n        // ctx.setFormValid(formValid);\n    }\n    const updateButtonAction = (subType) => {\n        ctx.setSubType({ ...ctx.subTypeModel, ...subType });\n        ctx.setUpdateAction(true);\n        ctx.setErrorMsg(ctx.errorModel);\n\n    }\n\n    const cancelButtonAction = () => {\n        ctx.setSubType(ctx.subTypeModel);\n        ctx.setFormValid(false);\n        ctx.setUpdateAction(false);\n        ctx.setErrorMsg(ctx.errorModel);\n    }\n    return (\n\n        <div className=\"content-wrapper\">\n            <div className=\"content-header\">\n                <div className=\"container-fluid\">\n                    <div className=\"row\">\n                        <div className=\"col-4 shadow-none p-3 mb-5 bg-white rounded\" >\n                            <ProductSubTypeAdd updateAction={ctx.updateAction} errorMsg={ctx.errorMsg} subType={ctx.subType} handleInputChange={handleInputChange}></ProductSubTypeAdd>\n                            <ProductSubTypeControl updateAction={ctx.updateAction} setUpdateAction={ctx.setUpdateAction}\n                                cancelButtonAction={cancelButtonAction}\n                                formValid={ctx.formValid} add={ctx.addProductSubType}> </ProductSubTypeControl>\n                        </div>\n                        {ctx.table.loading ? <p>loading </p> :\n                            <div className=\"col-8\"><TypeTable setSubType={ctx.setSubType} updateButtonAction={updateButtonAction} subTypes={ctx.subTypes}></TypeTable></div>\n                        }\n                    </div>\n                </div>\n            </div>\n        </div >\n    )\n}\n\nexport default ProductSubTypeContent;"]},"metadata":{},"sourceType":"module"}