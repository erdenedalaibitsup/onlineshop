{"ast":null,"code":"var _jsxFileName = \"/Users/User1/developer/onlineshop/src/pages/admin/content/ProductTypeContent.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport TypeTable from '../dataTable/ProductTypeTable';\nimport ProductTypeAdd from '../components/ProductTypeAdd';\nimport { ProductTypeContext } from '../../context/ProductTypeCtx';\nimport { validation, validatorTypes } from '../../util/validator';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProductTypeContent = () => {\n  _s();\n\n  const ctx = React.useContext(ProductTypeContext);\n\n  const handleInputChange = event => {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    const formType = target.type;\n    const validationTypes = {\n      price: validatorTypes.POSITIVENUMBER,\n      id: validatorTypes.EMAIL\n    }; // if (formType == \"file\") {\n    //     if (event.target.files[0]) {\n    //         Resizer.imageFileResizer(\n    //             event.target.files[0],\n    //             500,\n    //             500,\n    //             \"png\",\n    //             100,\n    //             0,\n    //             (uri) => {\n    //                 // console.log(uri.split(',')[1])\n    //                 this.setState({ mainimage: uri });\n    //             },\n    //             \"base64\",\n    //             200,\n    //             200\n    //         );\n    //     }\n    // }\n\n    const validate = validation(value, validationTypes[name], name == \"id\" && ctx.type);\n    console.log(\"value\" + value);\n    console.log(\"value\" + ctx.errorMsg[name].show);\n    let formValid = false;\n\n    if (!validate.show) {\n      let istemvavlid = true;\n      Object.values(ctx.type).map((el, index) => {\n        if (el.length == 0 && Object.keys(ctx.type)[index] != [name]) {\n          istemvavlid = false;\n          return;\n        }\n      });\n\n      if (istemvavlid) {\n        formValid = true;\n      }\n    }\n\n    const errorMsg = { ...ctx.errorMsg,\n      [name]: validate\n    };\n    const type = { ...ctx.type,\n      [name]: value\n    };\n    ctx.setType(type);\n    ctx.setErrorMsg(errorMsg);\n    ctx.setFormValid(formValid);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-header\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container-fluid\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-6\",\n              children: /*#__PURE__*/_jsxDEV(ProductTypeAdd, {\n                errorMsg: ctx.errorMsg,\n                type: ctx.type,\n                handleInputChange: handleInputChange,\n                addProductType: ctx.addProductType\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"content\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container-fluid\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-12\",\n              children: /*#__PURE__*/_jsxDEV(TypeTable, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 53\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ProductTypeContent, \"/dMy7t63NXD4eYACoT93CePwGrg=\");\n\n_c = ProductTypeContent;\nexport default ProductTypeContent;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductTypeContent\");","map":{"version":3,"sources":["/Users/User1/developer/onlineshop/src/pages/admin/content/ProductTypeContent.js"],"names":["React","TypeTable","ProductTypeAdd","ProductTypeContext","validation","validatorTypes","ProductTypeContent","ctx","useContext","handleInputChange","event","target","value","name","formType","type","validationTypes","price","POSITIVENUMBER","id","EMAIL","validate","console","log","errorMsg","show","formValid","istemvavlid","Object","values","map","el","index","length","keys","setType","setErrorMsg","setFormValid","addProductType"],"mappings":"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","sourcesContent":["import React from 'react'\nimport TypeTable from '../dataTable/ProductTypeTable'\nimport ProductTypeAdd from '../components/ProductTypeAdd'\nimport { ProductTypeContext } from '../../context/ProductTypeCtx'\nimport { validation, validatorTypes } from '../../util/validator'\nconst ProductTypeContent = () => {\n    const ctx = React.useContext(ProductTypeContext);\n    const handleInputChange = (event) => {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        const formType = target.type;\n        const validationTypes = {\n            price: validatorTypes.POSITIVENUMBER,\n            id: validatorTypes.EMAIL,\n        };\n        // if (formType == \"file\") {\n        //     if (event.target.files[0]) {\n        //         Resizer.imageFileResizer(\n        //             event.target.files[0],\n        //             500,\n        //             500,\n        //             \"png\",\n        //             100,\n        //             0,\n        //             (uri) => {\n        //                 // console.log(uri.split(',')[1])\n        //                 this.setState({ mainimage: uri });\n        //             },\n        //             \"base64\",\n        //             200,\n        //             200\n        //         );\n        //     }\n        // }\n        const validate = validation(\n            value,\n            validationTypes[name],\n            name == \"id\" && ctx.type\n        );\n\n        console.log(\"value\" + value);\n        console.log(\"value\" + ctx.errorMsg[name].show);\n\n        let formValid = false;\n\n        if (!validate.show) {\n            let istemvavlid = true;\n            Object.values(ctx.type).map((el, index) => {\n                if (\n                    el.length == 0 &&\n                    Object.keys(ctx.type)[index] != [name]\n                ) {\n                    istemvavlid = false;\n                    return;\n                }\n            });\n            if (istemvavlid) {\n                formValid = true;\n            }\n        }\n        const errorMsg = {\n            ...ctx.errorMsg,\n            [name]: validate,\n        }\n        const type = {\n            ...ctx.type,\n            [name]: value,\n        };\n\n        ctx.setType(type);\n        ctx.setErrorMsg(errorMsg);\n        ctx.setFormValid(formValid);\n    }\n\n    return (\n        <div className=\"content-wrapper\">\n            <div>\n                <div className=\"content-header\">\n                    <div className=\"container-fluid\">\n                        <div className=\"row\">\n                            <div className=\"col-6\">\n                                <ProductTypeAdd errorMsg={ctx.errorMsg} type={ctx.type} handleInputChange={handleInputChange} addProductType={ctx.addProductType}></ProductTypeAdd>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <section className=\"content\">\n                    <div className=\"container-fluid\">\n                        <div className=\"row\">\n                            <div className=\"col-12\"><TypeTable></TypeTable></div>\n                        </div>\n                    </div>\n                </section>\n            </div>\n        </div >\n    )\n}\n\nexport default ProductTypeContent;"]},"metadata":{},"sourceType":"module"}