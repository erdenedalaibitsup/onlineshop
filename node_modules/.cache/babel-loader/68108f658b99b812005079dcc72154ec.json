{"ast":null,"code":"var _jsxFileName = \"/Users/User1/developer/onlineshop/src/pages/context/ProductTypeCtx.js\",\n    _s = $RefreshSig$();\n\nimport React, { useImperativeHandle, useState } from 'react';\nimport firebase from '../../firebase'; // const initialState = {\n//     types: [\n//         {\n//             id: \"\",\n//             name: \"\"\n//         }\n//     ],\n//     type: {\n//         id: \"1\",\n//         name: \"name\"\n//     },\n//     errorMsg: {\n//         id: { show: false },\n//         name: { show: false }\n//     },\n//     table: {\n//         loading: true,\n//         error: false\n//     },\n//     event: {\n//         loading: true,\n//         error: false\n//     },\n//     formValid: false\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst productTypeCon = firebase.firestore().collection('productType');\nexport const ProductTypeContext = /*#__PURE__*/React.createContext();\nexport const ProductTypeProvider = props => {\n  _s();\n\n  const [type, setType] = useState({\n    id: \"1\",\n    name: \"name\"\n  });\n  const [types, setTypes] = useState([{\n    id: \"\",\n    name: \"\"\n  }]);\n  const [errorMsg, setErrorMsg] = useState({\n    id: {\n      show: false\n    },\n    name: {\n      show: false\n    }\n  });\n  const [event, setEvent] = useState({\n    loading: true,\n    error: false\n  });\n  const [formValid, setFormValid] = useState(false);\n  React.useEffect(() => {\n    getProductType();\n  }, []);\n\n  const getProductType = () => {\n    productTypeCon.get().then(collections => {\n      const datas = collections.docs.map(type => type.data());\n      setTableLoading(datas, false, false);\n      console.log(\"datas\" + datas.length);\n    }).catch(ex => {\n      console.log(\"error\" + ex);\n      setTableLoading([], false, false);\n    });\n  };\n\n  const addProductType = type => {\n    console.log(\"type\", type);\n  };\n\n  const setEventLoading = (type, isLoading, error) => {\n    setState({\n      event: {\n        isLoading,\n        error\n      },\n      types: type\n    });\n  };\n\n  const setTableLoading = (types, isLoading, error) => {\n    setState({\n      table: {\n        isLoading,\n        error\n      },\n      types: types\n    });\n  };\n\n  const databaseUpdate = type => {\n    productTypeCon.doc(String(type.id)).set().then(res => {\n      alert(\"amjilttal nemlee\");\n    }).catch(ex => console.log(\"aldaa garlaa\") + ex).finally(ex => {\n      getProductType();\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(ProductTypeContext.Provider, {\n    value: {\n      state,\n      addProductType\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 12\n  }, this);\n};\n\n_s(ProductTypeProvider, \"JPw6hd47vfA3YTvACqe/gtthgj0=\");\n\n_c = ProductTypeProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductTypeProvider\");","map":{"version":3,"sources":["/Users/User1/developer/onlineshop/src/pages/context/ProductTypeCtx.js"],"names":["React","useImperativeHandle","useState","firebase","productTypeCon","firestore","collection","ProductTypeContext","createContext","ProductTypeProvider","props","type","setType","id","name","types","setTypes","errorMsg","setErrorMsg","show","event","setEvent","loading","error","formValid","setFormValid","useEffect","getProductType","get","then","collections","datas","docs","map","data","setTableLoading","console","log","length","catch","ex","addProductType","setEventLoading","isLoading","setState","table","databaseUpdate","doc","String","set","res","alert","finally","state","children"],"mappings":"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","sourcesContent":["import React, { useImperativeHandle, useState } from 'react';\nimport firebase from '../../firebase'\n\n// const initialState = {\n//     types: [\n//         {\n//             id: \"\",\n//             name: \"\"\n//         }\n//     ],\n//     type: {\n//         id: \"1\",\n//         name: \"name\"\n//     },\n//     errorMsg: {\n//         id: { show: false },\n//         name: { show: false }\n//     },\n//     table: {\n//         loading: true,\n//         error: false\n//     },\n//     event: {\n//         loading: true,\n//         error: false\n//     },\n//     formValid: false\n// }\nconst productTypeCon = firebase.firestore().collection('productType');\nexport const ProductTypeContext = React.createContext();\nexport const ProductTypeProvider = (props) => {\n    const [type, setType] = useState({\n        id: \"1\",\n        name: \"name\"\n    });\n    const [types, setTypes] = useState([\n        {\n            id: \"\",\n            name: \"\"\n        }\n    ]);\n    const [errorMsg, setErrorMsg] = useState({\n        id: { show: false },\n        name: { show: false }\n    });\n    const [event, setEvent] = useState({\n        loading: true,\n        error: false\n    });\n    const [formValid, setFormValid] = useState(false);\n\n    React.useEffect(() => {\n        getProductType();\n    }, []);\n\n    const getProductType = () => {\n        productTypeCon.get().then((collections) => {\n            const datas = collections.docs.map((type) => type.data());\n            setTableLoading(datas, false, false);\n            console.log(\"datas\" + datas.length);\n        }).catch((ex) => {\n            console.log(\"error\" + ex);\n            setTableLoading([], false, false);\n        });\n    }\n\n    const addProductType = (type) => {\n        console.log(\"type\", type);\n    }\n\n    const setEventLoading = (type, isLoading, error) => {\n        setState({ event: { isLoading, error }, types: type });\n    }\n\n    const setTableLoading = (types, isLoading, error) => {\n        setState({ table: { isLoading, error }, types: types });\n    }\n    const databaseUpdate = (type) => {\n        productTypeCon.doc(String(type.id)).set().then((res) => {\n            alert(\"amjilttal nemlee\");\n\n        }).catch((ex) => console.log(\"aldaa garlaa\") + ex).finally(ex => {\n            getProductType();\n        });\n    }\n\n\n    return <ProductTypeContext.Provider value={{ state, addProductType }}>{props.children}</ProductTypeContext.Provider>\n}"]},"metadata":{},"sourceType":"module"}