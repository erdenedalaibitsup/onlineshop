{"ast":null,"code":"var _jsxFileName = \"/Users/User1/developer/onlineshop/src/pages/context/ProductTypeCtx.js\",\n    _s = $RefreshSig$();\n\nimport React, { useImperativeHandle, useState } from 'react';\nimport firebase from '../../firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  types: [{\n    id: \"\",\n    name: \"\"\n  }],\n  type: {\n    id: \"1\",\n    name: \"name\"\n  },\n  errorMsg: {\n    id: {\n      show: false\n    },\n    name: {\n      show: false\n    }\n  },\n  table: {\n    loading: true,\n    error: false\n  },\n  event: {\n    loading: true,\n    error: false\n  },\n  formValid: false\n};\nconst productTypeCon = firebase.firestore().collection('productType');\nexport const ProductTypeContext = /*#__PURE__*/React.createContext();\nexport const ProductTypeProvider = props => {\n  _s();\n\n  const [state, setState] = useState(initialState);\n  const [type, setType] = useState();\n  const [types, setTypes] = useState();\n  const [errorMsg, setErrorMsg] = useState({\n    id: {\n      show: false\n    },\n    name: {\n      show: false\n    }\n  });\n  const [event, setEvent] = useState({\n    loading: true,\n    error: false\n  });\n  const [formValid, setFormValid] = useState(false);\n  React.useEffect(() => {\n    getProductType();\n  }, []);\n\n  const getProductType = () => {\n    productTypeCon.get().then(collections => {\n      const datas = collections.docs.map(type => type.data());\n      setTableLoading(datas, false, false);\n      console.log(\"datas\" + datas.length);\n    }).catch(ex => {\n      console.log(\"error\" + ex);\n      setTableLoading([], false, false);\n    });\n  };\n\n  const addProductType = type => {\n    console.log(\"type\", type);\n  };\n\n  const setEventLoading = (type, isLoading, error) => {\n    setState({\n      event: {\n        isLoading,\n        error\n      },\n      types: type\n    });\n  };\n\n  const setTableLoading = (types, isLoading, error) => {\n    setState({\n      table: {\n        isLoading,\n        error\n      },\n      types: types\n    });\n  };\n\n  const databaseUpdate = type => {\n    productTypeCon.doc(String(type.id)).set().then(res => {\n      alert(\"amjilttal nemlee\");\n    }).catch(ex => console.log(\"aldaa garlaa\") + ex).finally(ex => {\n      getProductType();\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(ProductTypeContext.Provider, {\n    value: {\n      state,\n      addProductType\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 12\n  }, this);\n};\n\n_s(ProductTypeProvider, \"EazhLpfIrQrB/lXpXLKqZtxqAsU=\");\n\n_c = ProductTypeProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductTypeProvider\");","map":{"version":3,"sources":["/Users/User1/developer/onlineshop/src/pages/context/ProductTypeCtx.js"],"names":["React","useImperativeHandle","useState","firebase","initialState","types","id","name","type","errorMsg","show","table","loading","error","event","formValid","productTypeCon","firestore","collection","ProductTypeContext","createContext","ProductTypeProvider","props","state","setState","setType","setTypes","setErrorMsg","setEvent","setFormValid","useEffect","getProductType","get","then","collections","datas","docs","map","data","setTableLoading","console","log","length","catch","ex","addProductType","setEventLoading","isLoading","databaseUpdate","doc","String","set","res","alert","finally","children"],"mappings":"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","sourcesContent":["import React, { useImperativeHandle, useState } from 'react';\nimport firebase from '../../firebase'\n\nconst initialState = {\n    types: [\n        {\n            id: \"\",\n            name: \"\"\n        }\n    ],\n    type: {\n        id: \"1\",\n        name: \"name\"\n    },\n    errorMsg: {\n        id: { show: false },\n        name: { show: false }\n    },\n    table: {\n        loading: true,\n        error: false\n    },\n    event: {\n        loading: true,\n        error: false\n    },\n    formValid: false\n}\nconst productTypeCon = firebase.firestore().collection('productType');\nexport const ProductTypeContext = React.createContext();\nexport const ProductTypeProvider = (props) => {\n    const [state, setState] = useState(initialState);\n    const [type, setType] = useState();\n    const [types, setTypes] = useState();\n    const [errorMsg, setErrorMsg] = useState({\n        id: { show: false },\n        name: { show: false }\n    });\n    const [event, setEvent] = useState({\n        loading: true,\n        error: false\n    });\n    const [formValid, setFormValid] = useState(false);\n\n    React.useEffect(() => {\n        getProductType();\n    }, []);\n\n    const getProductType = () => {\n        productTypeCon.get().then((collections) => {\n            const datas = collections.docs.map((type) => type.data());\n            setTableLoading(datas, false, false);\n            console.log(\"datas\" + datas.length);\n        }).catch((ex) => {\n            console.log(\"error\" + ex);\n            setTableLoading([], false, false);\n        });\n    }\n\n    const addProductType = (type) => {\n        console.log(\"type\", type);\n    }\n\n    const setEventLoading = (type, isLoading, error) => {\n        setState({ event: { isLoading, error }, types: type });\n    }\n\n    const setTableLoading = (types, isLoading, error) => {\n        setState({ table: { isLoading, error }, types: types });\n    }\n    const databaseUpdate = (type) => {\n        productTypeCon.doc(String(type.id)).set().then((res) => {\n            alert(\"amjilttal nemlee\");\n\n        }).catch((ex) => console.log(\"aldaa garlaa\") + ex).finally(ex => {\n            getProductType();\n        });\n    }\n\n\n    return <ProductTypeContext.Provider value={{ state, addProductType }}>{props.children}</ProductTypeContext.Provider>\n}"]},"metadata":{},"sourceType":"module"}