{"ast":null,"code":"var _jsxFileName = \"/Users/User1/developer/onlineshop/src/pages/admin/content/ProductTypeContent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport TypeTable from '../dataTable/ProductTypeTable';\nimport ProductTypeAdd from '../components/ProductTypeAdd';\nimport ProductTypeControl from '../components/ProductTypeControl';\nimport { ProductTypeContext } from '../../context/ProductTypeCtx';\nimport { validation, validatorTypes } from '../../util/validator';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProductTypeContent = () => {\n  _s();\n\n  const ctx = React.useContext(ProductTypeContext);\n\n  const handleInputChange = event => {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    const validationTypes = {\n      name: validatorTypes.POSITIVENUMBER,\n      id: validatorTypes.POSITIVENUMBER\n    };\n    const validate = validation(value, validationTypes[name], name === \"id\" && ctx.type);\n    let formValid = false;\n    const type = { ...ctx.type,\n      [name]: value\n    };\n\n    if (!validate.show) {\n      let istemvavlid = true;\n      Object.values(type).map((el, index) => {\n        if (el.length === 0 && Object.keys(ctx.type)[index] !== [name]) {\n          istemvavlid = false;\n        }\n      });\n\n      if (istemvavlid) {\n        formValid = true;\n      }\n    }\n\n    const errorMsg = { ...ctx.errorMsg,\n      [name]: validate\n    };\n    ctx.setType(type);\n    ctx.setErrorMsg(errorMsg);\n    ctx.setFormValid(formValid);\n  };\n\n  const updateButtonAction = () => {\n    setUpdateAction(true);\n  };\n\n  const cancelButtonAction = () => {\n    setUpdateAction(false);\n    ctx.setType({});\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-header\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container-fluid\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-4 shadow-none p-3 mb-5 bg-white rounded\",\n            children: [/*#__PURE__*/_jsxDEV(ProductTypeAdd, {\n              updateAction: updateAction,\n              errorMsg: ctx.errorMsg,\n              type: ctx.type,\n              handleInputChange: handleInputChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(ProductTypeControl, {\n              updateAction: updateAction,\n              setUpdateAction: setUpdateAction,\n              cancelButtonAction: cancelButtonAction,\n              formValid: ctx.formValid,\n              addProductType: ctx.addProductType,\n              children: \" \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this), ctx.table.loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"loading \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 46\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-8\",\n            children: /*#__PURE__*/_jsxDEV(TypeTable, {\n              setType: ctx.setType,\n              updateButtonAction: updateButtonAction,\n              types: ctx.types\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 52\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ProductTypeContent, \"/dMy7t63NXD4eYACoT93CePwGrg=\");\n\n_c = ProductTypeContent;\nexport default ProductTypeContent;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductTypeContent\");","map":{"version":3,"sources":["/Users/User1/developer/onlineshop/src/pages/admin/content/ProductTypeContent.js"],"names":["React","useState","TypeTable","ProductTypeAdd","ProductTypeControl","ProductTypeContext","validation","validatorTypes","ProductTypeContent","ctx","useContext","handleInputChange","event","target","value","name","validationTypes","POSITIVENUMBER","id","validate","type","formValid","show","istemvavlid","Object","values","map","el","index","length","keys","errorMsg","setType","setErrorMsg","setFormValid","updateButtonAction","setUpdateAction","cancelButtonAction","updateAction","addProductType","table","loading","types"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport TypeTable from '../dataTable/ProductTypeTable'\nimport ProductTypeAdd from '../components/ProductTypeAdd'\nimport ProductTypeControl from '../components/ProductTypeControl'\nimport { ProductTypeContext } from '../../context/ProductTypeCtx'\nimport { validation, validatorTypes } from '../../util/validator'\nconst ProductTypeContent = () => {\n    const ctx = React.useContext(ProductTypeContext);\n    const handleInputChange = (event) => {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        const validationTypes = {\n            name: validatorTypes.POSITIVENUMBER,\n            id: validatorTypes.POSITIVENUMBER,\n        };\n        const validate = validation(\n            value,\n            validationTypes[name],\n            name === \"id\" && ctx.type\n        );\n        let formValid = false;\n        const type = {\n            ...ctx.type,\n            [name]: value,\n        };\n        if (!validate.show) {\n            let istemvavlid = true;\n            Object.values(type).map((el, index) => {\n                if (\n                    el.length === 0 &&\n                    Object.keys(ctx.type)[index] !== [name]\n                ) {\n                    istemvavlid = false;\n                }\n            });\n            if (istemvavlid) {\n                formValid = true;\n            }\n        }\n        const errorMsg = {\n            ...ctx.errorMsg,\n            [name]: validate,\n        }\n\n\n        ctx.setType(type);\n        ctx.setErrorMsg(errorMsg);\n        ctx.setFormValid(formValid);\n    }\n    const updateButtonAction = () => {\n        setUpdateAction(true);\n    }\n\n    const cancelButtonAction = () => {\n        setUpdateAction(false);\n        ctx.setType({});\n    }\n\n    return (\n        <div className=\"content-wrapper\">\n            <div className=\"content-header\">\n                <div className=\"container-fluid\">\n                    <div className=\"row\">\n                        <div className=\"col-4 shadow-none p-3 mb-5 bg-white rounded\" >\n                            <ProductTypeAdd updateAction={updateAction} errorMsg={ctx.errorMsg} type={ctx.type} handleInputChange={handleInputChange}></ProductTypeAdd>\n\n                            <ProductTypeControl updateAction={updateAction} setUpdateAction={setUpdateAction}\n                                cancelButtonAction={cancelButtonAction}\n                                formValid={ctx.formValid} addProductType={ctx.addProductType}> </ProductTypeControl>\n                        </div>\n                        {ctx.table.loading ? <div>loading </div> :\n                            <div className=\"col-8\"><TypeTable setType={ctx.setType} updateButtonAction={updateButtonAction} types={ctx.types}></TypeTable></div>\n                        }\n                    </div>\n                </div>\n            </div>\n\n\n        </div >\n    )\n}\n\nexport default ProductTypeContent;"]},"metadata":{},"sourceType":"module"}