{"ast":null,"code":"import { validation } from '../../util/validator';\n\nconst handleInputChanger = (event, validationTypes, validate, Resizer, setMainImage, model, errorMsgModel, setModel, setErrorMsg, setFormValid) => {\n  const target = event.target;\n  const value = target.value;\n  const name = target.name;\n  const type = target.type;\n\n  if (type == 'file') {\n    if (event.target.files[0]) {\n      Resizer.imageFileResizer(event.target.files[0], 500, 500, 'png', 100, 0, uri => {\n        setMainImage(uri);\n      }, 'base64', 200, 200);\n    }\n  }\n\n  let formValid = false;\n  const tempModel = { ...model,\n    [name]: value\n  };\n\n  if (!validate.show) {\n    let istemvavlid = true;\n    Object.values(model).map((el, index) => {\n      if (el.length === 0 && Object.keys(model)[index] !== [name]) {\n        istemvavlid = false;\n        return;\n      }\n    });\n\n    if (istemvavlid) {\n      formValid = true;\n    }\n  }\n\n  const errorMsg = { ...errorMsgModel,\n    [name]: validate\n  };\n  setModel(tempModel);\n  setErrorMsg(errorMsg);\n  setFormValid(formValid);\n};\n\nexport default handleInputChanger;","map":{"version":3,"sources":["/Users/User1/developer/onlineshop/src/pages/admin/handleInputChanger/index.js"],"names":["validation","handleInputChanger","event","validationTypes","validate","Resizer","setMainImage","model","errorMsgModel","setModel","setErrorMsg","setFormValid","target","value","name","type","files","imageFileResizer","uri","formValid","tempModel","show","istemvavlid","Object","values","map","el","index","length","keys","errorMsg"],"mappings":"AAAA,SAASA,UAAT,QAA2B,sBAA3B;;AAEA,MAAMC,kBAAkB,GAAG,CAACC,KAAD,EAAQC,eAAR,EAAyBC,QAAzB,EAAmCC,OAAnC,EAA4CC,YAA5C,EAA0DC,KAA1D,EAAiEC,aAAjE,EACrBC,QADqB,EACXC,WADW,EACEC,YADF,KAEtB;AACD,QAAMC,MAAM,GAAGV,KAAK,CAACU,MAArB;AACA,QAAMC,KAAK,GAAGD,MAAM,CAACC,KAArB;AACA,QAAMC,IAAI,GAAGF,MAAM,CAACE,IAApB;AACA,QAAMC,IAAI,GAAGH,MAAM,CAACG,IAApB;;AAEA,MAAIA,IAAI,IAAI,MAAZ,EAAoB;AAChB,QAAIb,KAAK,CAACU,MAAN,CAAaI,KAAb,CAAmB,CAAnB,CAAJ,EAA2B;AACvBX,MAAAA,OAAO,CAACY,gBAAR,CACIf,KAAK,CAACU,MAAN,CAAaI,KAAb,CAAmB,CAAnB,CADJ,EAEI,GAFJ,EAGI,GAHJ,EAII,KAJJ,EAKI,GALJ,EAMI,CANJ,EAOIE,GAAG,IAAI;AACHZ,QAAAA,YAAY,CAACY,GAAD,CAAZ;AAEH,OAVL,EAWI,QAXJ,EAYI,GAZJ,EAaI,GAbJ;AAgBH;AACJ;;AACD,MAAIC,SAAS,GAAG,KAAhB;AACA,QAAMC,SAAS,GAAG,EACd,GAAGb,KADW;AAEd,KAACO,IAAD,GAAQD;AAFM,GAAlB;;AAIA,MAAI,CAACT,QAAQ,CAACiB,IAAd,EAAoB;AAChB,QAAIC,WAAW,GAAG,IAAlB;AACAC,IAAAA,MAAM,CAACC,MAAP,CAAcjB,KAAd,EAAqBkB,GAArB,CAAyB,CAACC,EAAD,EAAKC,KAAL,KAAe;AACpC,UACID,EAAE,CAACE,MAAH,KAAc,CAAd,IACAL,MAAM,CAACM,IAAP,CAAYtB,KAAZ,EAAmBoB,KAAnB,MAA8B,CAACb,IAAD,CAFlC,EAGE;AACEQ,QAAAA,WAAW,GAAG,KAAd;AACA;AACH;AACJ,KARD;;AASA,QAAIA,WAAJ,EAAiB;AACbH,MAAAA,SAAS,GAAG,IAAZ;AACH;AACJ;;AACD,QAAMW,QAAQ,GAAG,EACb,GAAGtB,aADU;AAEb,KAACM,IAAD,GAAQV;AAFK,GAAjB;AAMAK,EAAAA,QAAQ,CAACW,SAAD,CAAR;AACAV,EAAAA,WAAW,CAACoB,QAAD,CAAX;AACAnB,EAAAA,YAAY,CAACQ,SAAD,CAAZ;AACH,CAzDD;;AA2DA,eAAelB,kBAAf","sourcesContent":["import { validation } from '../../util/validator'\n\nconst handleInputChanger = (event, validationTypes, validate, Resizer, setMainImage, model, errorMsgModel\n    , setModel, setErrorMsg, setFormValid\n) => {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    const type = target.type;\n\n    if (type == 'file') {\n        if (event.target.files[0]) {\n            Resizer.imageFileResizer(\n                event.target.files[0],\n                500,\n                500,\n                'png',\n                100,\n                0,\n                uri => {\n                    setMainImage(uri);\n\n                },\n                'base64',\n                200,\n                200,\n            );\n\n        }\n    }\n    let formValid = false;\n    const tempModel = {\n        ...model,\n        [name]: value,\n    };\n    if (!validate.show) {\n        let istemvavlid = true;\n        Object.values(model).map((el, index) => {\n            if (\n                el.length === 0 &&\n                Object.keys(model)[index] !== [name]\n            ) {\n                istemvavlid = false;\n                return;\n            }\n        });\n        if (istemvavlid) {\n            formValid = true;\n        }\n    }\n    const errorMsg = {\n        ...errorMsgModel,\n        [name]: validate,\n    }\n\n\n    setModel(tempModel);\n    setErrorMsg(errorMsg);\n    setFormValid(formValid);\n}\n\nexport default handleInputChanger;"]},"metadata":{},"sourceType":"module"}